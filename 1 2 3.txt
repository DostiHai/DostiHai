# # 1. Write the following programs for Blockchain in Python :
# i. A Simple client class that generates the private and public keys by using the built in Python RSA algorithm and test it.
# pip install pycryptodome
from Crypto.PublicKey import RSA
class Client:
    def __init__(self):
        self.private_key = None
        self.public_key = None

    def generate_keys(self):
        key = RSA.generate(2048)
        self.private_key = key.export_key()
        self.public_key = key.publickey().export_key()

    def display_keys(self):
        print("Private Key:")
        print(self.private_key.decode())
        print("---------------------")
        print("Public Key:")
        print(self.public_key.decode())
        print("---------------------")

# Creating a client and generating keys
client = Client()
client.generate_keys()

# Displaying the keys
client.display_keys()
##############################################################################################

# ii. A transaction class to send and receive money and test it.
class Transaction:
    def __init__(self, sender, receiver, amount):
        self.sender = sender
        self.receiver = receiver
        self.amount = amount

    def send_money(self):
        print(f"{self.sender} sent {self.amount} to {self.receiver}")

    def receive_money(self):
        print(f"{self.receiver} received {self.amount} from {self.sender}")

# Creating a transaction and sending/receiving money
transaction = Transaction("Alice", "Bob", 0.5)
transaction.send_money()
transaction.receive_money()


# // //******************Practical No: 2***************************************
# #2. Write the following programs for Blockchain in Python :
# i. Create multiple transactions and display them.

import hashlib
import datetime

class Transaction:
    def __init__(self, sender, receiver, amount):
        self.sender = sender
        self.receiver = receiver
        self.amount = amount

    def display(self):
        print("Sender: ", self.sender)
        print("Receiver: ", self.receiver)
        print("Amount: ", self.amount)

# Creating transactions
transaction1 = Transaction("Alice", "Bob", 0.5)
transaction2 = Transaction("Bob", "Charlie", 0.3)
transaction3 = Transaction("Alice", "Charlie", 0.2)

# Displaying transactions
transaction1.display()
print("----------------------")
transaction2.display()
print("----------------------")
transaction3.display()

# ii. Create a blockchain, a genesis block and execute it.
import datetime
import hashlib
class Block:
    def __init__(self, index, timestamp, data, previous_hash):
        self.index = index
        self.timestamp = timestamp
        self.data = data
        self.previous_hash = previous_hash
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        sha = hashlib.sha256()
        sha.update((str(self.index) + str(self.timestamp) + str(self.data) + str(self.previous_hash)).encode('utf-8'))
        return sha.hexdigest()

class Blockchain:
    def __init__(self):
        self.chain = [self.create_genesis_block()]

    def create_genesis_block(self):
        return Block(0, datetime.datetime.now(), "Genesis Block", "0")

    def add_block(self, data):
        previous_block = self.chain[-1]
        new_block = Block(len(self.chain), datetime.datetime.now(), data, previous_block.hash)
        self.chain.append(new_block)

    def display_chain(self):
        for block in self.chain:
            print("Block Index: ", block.index)
            print("Timestamp: ", block.timestamp)
            print("Data: ", block.data)
            print("Previous Hash: ", block.previous_hash)
            print("Hash: ", block.hash)
            print("----------------------")

# Creating a blockchain
blockchain = Blockchain()

# Adding blocks to the blockchain
blockchain.add_block("Transaction 1")
blockchain.add_block("Transaction 2")
blockchain.add_block("Transaction 3")

# Displaying the blockchain
blockchain.display_chain()

# // //*************************Practical No: 3************************************************************ 
# # 3.Write the following programs for Blockchain in Python :

# i) Create a mining function and test it.

import hashlib
def mine_block(previous_block_hash, transactions):
    nonce = 0
    while True:
        block_data = str(nonce) + str(previous_block_hash) + str(transactions)
        block_hash = hashlib.sha256(block_data.encode()).hexdigest()

        # Check if the block hash satisfies the mining condition
        if block_hash.startswith('0000'):
            print("Block mined successfully!")
            print("Nonce:",nonce)
            print("Block Hash:",block_hash)
            break
        nonce += 1

# Test mining a block
previous_block_hash = "0000000000000000000000000000000000000000000000000000000000000000"
transactions = ["Transaction 1", "Transaction 2", "Transaction 3"]
mine_block(previous_block_hash, transactions)

#i
class Block:
    def __init__(self, index, previous_block_hash, transactions):
        self.index = index
        self.previous_block_hash = previous_block_hash
        self.transactions = transactions

    def display(self):
        print("Block Index:", self.index)
        print("Previous Block Hash:", self.previous_block_hash)
        print("Transactions:", self.transactions)
        print("---------------------")


# # # ii) Add blocks to the miner and dump the blockchain.
class Block:
    def __init__(self, index, previous_block_hash, transactions):
        self.index = index
        self.previous_block_hash = previous_block_hash
        self.transactions = transactions

    def display(self):
        print("Block Index:", self.index)
        print("Previous Block Hash:", self.previous_block_hash)
        print("Transactions:", self.transactions)
        print("---------------------")


class Blockchain:
    def __init__(self):
        self.chain = []

    def add_block(self, block):
        self.chain.append(block)

    def dump_chain(self):
        for block in self.chain:
            block.display()

# Create a blockchain and add blocks
blockchain = Blockchain()

# Create blocks
block1 = Block(1, "0000000000000000000000000000000000000000000000000000000000000000", ["Transaction 1"])
block2 = Block(2, block1.previous_block_hash, ["Transaction 2"])
block3 = Block(3, block2.previous_block_hash, ["Transaction 3"])

# Add blocks to the blockchain
blockchain.add_block(block1)
blockchain.add_block(block2)
blockchain.add_block(block3)

# Dump the blockchain
blockchain.dump_chain()